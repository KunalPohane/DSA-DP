 //{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            int N = Integer.parseInt(read.readLine());
            String input_line[] = read.readLine().trim().split("\\s+");
            int arr[]= new int[N];
            for(int i = 0; i < N; i++)
                arr[i] = Integer.parseInt(input_line[i]);
            int sum = Integer.parseInt(read.readLine());

            Solution ob = new Solution();
            if(ob.isSubsetSum(N, arr, sum))
            System.out.println(1);
            else
            System.out.println(0);

            
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution{


    static Boolean isSubsetSum(int N, int arr[], int sum){
        // code here
        
        int n = N;
        int W = sum;
        
        
        boolean dp[][] = new boolean[n+1][W+1];
        
        
        for(int i = 0 ; i < n +1 ; i++){ //weightarray size + 1
            
            for(int j = 0 ; j < W +1 ;j++){ // Wcapacity + 1
                
                if(j >0 && i == 0){ //initlization
                    
                    dp[i][j] = false ; //array hi empty h to sum kahase check krege ?
                    
                    // For an empty array, no subset can have a non-zero sum
                    
                }
                
             else if(i == 0 && j == 0){ //initlization
                    
                    dp[i][j] = true ; // sum == 0 raha too kr skte h return true obv
                    
                    // For a target sum of 0, an empty subset is a valid subset
                }
                
                
                else if(j >= arr[i-1]){
                    
                    dp[i][j] = dp[i-1][j-arr[i-1]] || dp[i-1][j];
                    
                }
                
                else{
                    
                     dp[i][j] = dp[i-1][j];
                    
                }
                
                
            }
            
            
        }
        
        
        return dp[n][W];
        
        
    }
}
