//Minimum Subset Sum Difference

//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
class GfG
{
    public static void main(String args[])
        {
            Scanner sc = new Scanner(System.in);
            int t = sc.nextInt();
            while(t-->0)
                {
                    int n = sc.nextInt();
                    int A[] = new int[n];
                    for(int i = 0;i<n;i++)
                        A[i] = sc.nextInt();
                    Solution ob = new Solution();
                    System.out.println(ob.minDifference(A,n));
                }
        }
}    
// } Driver Code Ends


//User function Template for Java

class Solution
{

	public int minDifference(int arr[], int n) 
	{ 
	  
	  int range = 0 ;
	  
	  for(int i = 0 ; i < n ; i++){

	      range = range + arr[i];
	      
	  }
	  
// 	  System.out.println("range is "+ range);
	  
	  boolean dp[][] = new boolean [n+1][range+1] ;
	  
	  
	  ArrayList<Integer> S1_range_filtered = SubsetSum(dp ,arr ,n , range) ;
	  
	  
	  int min = Integer.MAX_VALUE;
	  
	  for(int i = 0 ; i < S1_range_filtered.size() ;i++){
	      
	      
	      min = Math.abs(Math.min(min , range - 2*S1_range_filtered.get(i)));
	      
	  }
	  
	  
// 	  System.out.println(S1_range_filtered);
	  
	  return min;
	  
	} 
	
	
	public static ArrayList<Integer> SubsetSum( boolean dp[][] ,int arr[] , int n , int W){
	    
	    ArrayList<Integer> S1 = new ArrayList<>();
	    
	    for(int i = 0 ; i< n+1 ;i++){
	        
	        
	        for(int j = 0 ; j< W+1 ; j++){
	            
	            
	            if(j > 0 && i == 0){
	                
	                dp[i][j] = false;
	                
	            }
	            
	            else if(j == 0 ){
	                
	                dp[i][j] =  true;
	                
	                
	            }
	            
	            else if(j>= arr[i-1]){
	              
	                
	                dp[i][j] = dp[i-1][j - arr[i-1]] || dp[i-1][j];
	                
	            }
	            
	            else{
	                
	                dp[i][j] = dp[i-1][j];
	                
	            }
	            
	            
	        }
	       
	    }
	    
	    
	    for(int i = 0 ; i <= (W + 1)/2; i++){
	        
	        if(dp[n][i] == true){
	            
	             S1.add(i);
	            
	        }
	       
	        
	    }
	    
	    
	    return S1;
	    
	}
}
