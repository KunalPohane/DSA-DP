//{ Driver Code Starts

//When a specific length array is given, each length in that array represents a potential cut that can be made on the rod. Therefore, when solving the rod cutting problem with a given length array, we need to consider each length in the array to determine the maximum achievable price for the given rod length.

For example, if the length array is [1, 2], it means that we can make cuts at lengths 1 and 2. Therefore, when computing the maximum achievable price, we need to consider these lengths and their corresponding prices to find the optimal solution.


import java.io.*;
import java.util.*;

class RodCutting {

    public static void main(String args[])throws IOException {
        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        
        int t = Integer.parseInt(in.readLine().trim());
        while (t-- > 0) {
            int n = Integer.parseInt(in.readLine().trim());
            String s[]=in.readLine().trim().split(" ");
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) arr[i] = Integer.parseInt(s[i]);

            Solution ob = new Solution();
            out.println(ob.cutRod(arr, n));
        }
        out.close();
    }
}

// } Driver Code Ends


class Solution{
    public int cutRod(int price[], int n) {
        //code here
        
        int dp[][] = new int[n+1][n+1]; // same size price array and length array ofc
        
    // making length array 
    
    int length[] = new int [n+1]; //0 to 8 i.e of 9 length
    
    for(int i = 0 ; i <n+1 ; i++){
        
        length[i] =  i ;
        
        
    }
    
    
    for(int i = 1 ; i<n+1 ; i++){ //from 1 to 8 fully size 
        
        
        for(int j = 1 ; j<n+1 ;j++){ //for each length we will consider not only for given ;length array like [3,4] and also 
            
            
            
            if(j >= i){ //for each length ,  we need subproblem to solve big problem so yeah
                
                
                dp[i][j] = Math.max(price[i-1] + dp[i][j - length[i]] , dp[i-1][j]);
                
                
                
            }    
            else {
                
                  dp[i][j] = dp[i-1][j] ;
                
                
            }
            
            
        }
        
        
    }
    
    
    return dp[n][n]; //return dp[8][8]
    

        
    }
}
